// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// explain the need of this database.
// we need to store user data, group data, transaction data, and message data.
// we need to store user data like name, email, phone number, password, photoURL, dob, followers, following, groups, transactions, messages, and refresh token.
// we need to store group data like name, description, adminId, members, transactions, currency, group type, group messages, amount, created at, and updated at.
// we need to store transaction data like amount, senderId, receiverId, groupId, payment method, status, created at, and updated at.
// we need to store message data like senderId, receiverId, group, message, created at, and updated at.

// why using mysql is a better option
// MySQL is an open-source relational database management system. It is a popular choice for web applications and websites. MySQL is known for its reliability, flexibility, and ease of use. It is widely used by developers and businesses around the world. MySQL is a powerful database management system that can handle large amounts of data and provide fast access to that data. It is a scalable and secure database system that can be used for a wide range of applications. MySQL is a popular choice for web applications, e-commerce sites, content management systems, and other types of websites. It is a versatile database system that can be used for a wide range of applications.
// MySQL is a popular choice for web applications and websites because it is easy to use, reliable, and flexible. It is a powerful database management system that can handle large amounts of data and provide fast access to that data. MySQL is a scalable and secure database system that can be used for a wide range of applications. It is a versatile database system that can be used for a wide range of applications. MySQL is an open-source database system that is widely used by developers and businesses around the world. It is a popular choice for web applications, e-commerce sites, content management systems, and other types of websites. MySQL is a powerful database system that can handle large amounts of data and provide fast access to that data. It is a scalable and secure database system that can be used for a wide range of applications. MySQL is a popular choice for web applications and websites because it is easy to use, reliable, and flexible.
// MySQL is a powerful database management system that can handle large amounts of data and provide fast access to that data. It is a scalable and secure database system that can be used for a wide range of applications. MySQL is a versatile database system that can be used for a wide range of applications. MySQL is an open-source database system that is widely used by developers and businesses around the world. It is a popular choice for web applications, e-commerce sites, content management systems, and other types of websites. MySQL is a powerful database system that can handle large amounts of data and provide fast access to that data. It is a scalable and secure database system that can be used for a wide range of applications. MySQL is a popular choice for web applications and websites because it is easy to use, reliable, and flexible.

// can you write a problem statement with this
// The problem statement is to create a database schema for a social media application that allows users to create groups, send messages, and make transactions. The database should store user data, group data, transaction data, and message data. The database should be able to handle large amounts of data and provide fast access to that data. The database should be scalable and secure. The database should be able to store user data like name, email, phone number, password, photoURL, dob, followers, following, groups, transactions, messages, and refresh token. The database should be able to store group data like name, description, adminId, members, transactions, currency, group type, group messages, amount, created at, and updated at. The database should be able to store transaction data like amount, senderId, receiverId, groupId, payment method, status, created at, and updated at. The database should be able to store message data like senderId, receiverId, group, message, created at, and updated at.

model User {
  id              Int            @id @default(autoincrement())
  firstName       String
  lastName        String
  username        String         @unique
  email           String         @unique
  password        String
  // how to store phone number in database
  // Int can't store 10 digit number so we use BigInt
  phoneNumber     String
  isEmailVerified Boolean        @default(false)
  photoURL        String
  dob             DateTime
  followers       Follow[]       @relation("Followers")
  following       Follow[]       @relation("Following")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Group           Group[]
  Sender          Transaction[]  @relation("Sender")
  Receiver        Transaction[]  @relation("Receiver")
  Author          message[]      @relation("Author")
  GroupMember     GroupMembers[]
  refreshToken    String?        @db.VarChar(500)
  // String? means that this field can be null
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation(fields: [followerId], references: [id], name: "Followers")
  followerId  Int
  following   User     @relation(fields: [followingId], references: [id], name: "Following")
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  adminId      Int
  members      GroupMembers[]
  admin        User           @relation(fields: [adminId], references: [id])
  transactions Transaction[]
  currecy      Currencies     @default(INR)
  groupTypes   GroupTypes     @default(PUBLIC)
  GroupMsg     message[]      @relation("GroupMsg")
  amount       Float          @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
}

model GroupMembers {
  id        Int      @id @default(autoincrement())
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  share     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GroupTypes {
  PUBLIC
  PRIVATE
}

model Transaction {
  id            Int            @id @default(autoincrement())
  amount        Float
  senderId      Int
  sender        User           @relation(fields: [senderId], references: [id], name: "Sender")
  receiverId    Int
  receiver      User           @relation(fields: [receiverId], references: [id], name: "Receiver")
  groupId       Int
  group         Group          @relation(fields: [groupId], references: [id])
  paymentMethod paymentMathods @default(Cash)
  status        Status         @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation(fields: [senderId], references: [id], name: "Author")
  receiverId Int
  group      Group    @relation(fields: [receiverId], references: [id], name: "GroupMsg")
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Status {
  SUCCESS
  PENDING
  FAILED
}

enum paymentMathods {
  Credit_Card
  Debit_Card
  UPI
  Cash
}

enum Currencies {
  INR
  USD
}
